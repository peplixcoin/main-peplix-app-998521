{"version":3,"file":"static/js/689.258caba9.chunk.js","mappings":"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","sources":["components/Cards/TitleCard.js","components/Typography/Subtitle.js","features/settings/billing/index.js","pages/protected/Bills.js"],"sourcesContent":["import Subtitle from \"../Typography/Subtitle\"\n\n  \n  function TitleCard({title, children, topMargin, TopSideButtons}){\n      return(\n          <div className={\"card w-full p-6 bg-base-100 shadow-xl \" + (topMargin || \"mt-6\")}>\n\n            {/* Title for Card */}\n              <Subtitle styleClass={TopSideButtons ? \"inline-block\" : \"\"}>\n                {title}\n\n                {/* Top side button, show only if present */}\n                {\n                    TopSideButtons && <div className=\"inline-block float-right\">{TopSideButtons}</div>\n                }\n              </Subtitle>\n              \n              <div className=\"divider mt-2\"></div>\n          \n              {/** Card Body */}\n              <div className='h-full w-full pb-6 bg-base-100'>\n                  {children}\n              </div>\n          </div>\n          \n      )\n  }\n  \n  \n  export default TitleCard"," function Subtitle({styleClass, children}){\n    return(\n        <div className={`text-xl font-semibold ${styleClass}`}>{children}</div>\n    )\n}\n\nexport default Subtitle","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport TitleCard from \"../../../components/Cards/TitleCard\";\nimport { useDispatch } from 'react-redux';\nimport { showNotification, clearNotification } from '../../common/headerSlice';\n\nfunction Billing() {\n    const [totalAmountInvested, setTotalAmountInvested] = useState(0);\n    const [transactions, setTransactions] = useState([]);\n    const [approvedTransactions, setApprovedTransactions] = useState([]);\n    const [totalTokens, setTotalTokens] = useState(0);\n    const [availableTokens, setAvailableTokens] = useState(0);\n    const [totalTokensWithdrawn, setTotalTokensWithdrawn] = useState(0);\n    const [error, setError] = useState(null);\n    const [loading, setLoading] = useState(true);\n    const dispatch = useDispatch();\n\n    // Retry logic for fetching data\n    const fetchDataWithRetry = async (url, options = {}, retries = 3) => {\n        try {\n            const res = await axios.get(url, { ...options, timeout: 5000 }); // 5-second timeout\n            return res.data;\n        } catch (error) {\n            if (retries > 0) {\n                return fetchDataWithRetry(url, options, retries - 1); // Retry the request\n            } else {\n                throw error; // Throw error after retries are exhausted\n            }\n        }\n    };\n\n    useEffect(() => {\n        dispatch(clearNotification());\n\n        const fetchUserData = async () => {\n            const token = localStorage.getItem('token');\n            if (!token) {\n                setError('No token found, please log in again.');\n                dispatch(showNotification({ message: 'No token found, please log in again.', status: 0 }));\n                setLoading(false);\n                return;\n            }\n            try {\n                const resUser = await fetchDataWithRetry('http://localhost:5000/api/users/profile', {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                const investedAmount = resUser.totalAmountInvested || 0;\n                setTotalAmountInvested(investedAmount);\n\n                const resTransactions = await fetchDataWithRetry('http://localhost:5000/api/users/transactions', {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n\n                const sortedTransactions = resTransactions.sort((a, b) => new Date(b.dateandtime) - new Date(a.dateandtime));\n                setTransactions(sortedTransactions);\n\n                // Filter only approved transactions for the cards\n                const approvedTrans = sortedTransactions.filter(transaction => transaction.status === 'approved');\n                setApprovedTransactions(approvedTrans);\n\n                // Calculate tokens and other data for approved transactions only\n                const totalTokensSum = approvedTrans.reduce((sum, transaction) => sum + (transaction.tokens || 0), 0);\n                const availableTokensSum = approvedTrans.reduce((sum, transaction) => sum + (transaction.tokensAvailable || 0), 0);\n                const totalWithdrawnTokensSum = approvedTrans.reduce((sum, transaction) => sum + (transaction.tokensWithdrawn || 0), 0);\n\n                setTotalTokens(totalTokensSum);\n                setAvailableTokens(availableTokensSum);\n                setTotalTokensWithdrawn(totalWithdrawnTokensSum);\n\n                setError(null);\n                dispatch(showNotification({ message: 'Data loaded successfully!', status: 1 }));\n            } catch (err) {\n                setError('Failed to fetch data.');\n                dispatch(showNotification({ message: 'Failed to fetch data.', status: 0 }));\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchUserData();\n    }, [dispatch]);\n\n    const getTransactionStatus = (status) => {\n        if (status === \"approved\") return <div className=\"badge badge-success\">{status}</div>;\n        if (status === \"pending\") return <div className=\"badge badge-primary\">{status}</div>;\n        if (status === \"rejected\") return <div className=\"badge badge-error\">{status}</div>;\n        return <div className=\"badge badge-ghost\">{status}</div>;\n    };\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p className=\"text-red-500\">{error}</p>;\n\n    return (\n        <>\n            {/* Cards for approved transactions only */}\n            <div className=\"grid grid-cols-1 md:grid-cols-1 lg:grid-cols-1 gap-6 mb-6\">\n                {approvedTransactions.map((transaction) => (\n                    <TitleCard key={transaction._id} title={transaction.packageName} topMargin=\"mt-2\">\n                        <p className=\"text-lg\">Total Tokens: {transaction.tokens}</p>\n                        <p className=\"text-lg\">Tokens Available: {transaction.tokensAvailable.toFixed(2)}</p>\n                        <p className=\"text-lg\">Tokens Withdrawn: {transaction.tokensWithdrawn}</p>\n                        <p className=\"text-lg\">Minimum Tokens: {transaction.min_tokens_req}</p>\n                    </TitleCard>\n                ))}\n            </div>\n\n            {/* Show all transactions in transaction history */}\n            <TitleCard title=\"Transaction History\" topMargin=\"mt-2\">    \n                <div className=\"overflow-x-auto w-full animate-fadeIn\">\n                    <table className=\"table w-full\">\n                        <thead>\n                            <tr>\n                                <th>Package Name</th>\n                                <th>Package Price</th>\n                                <th>Package Tokens</th>\n                                <th>Stacking Period</th>\n                                <th>Date</th>\n                                <th>Status</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {transactions.map((transaction) => (\n                                <tr key={transaction._id}>\n                                    <td>{transaction.packageName}</td>\n                                    <td>${transaction.packagePrice}</td>\n                                    <td>{transaction.tokens}</td>\n                                    <td>{transaction.stackingPeriod} Days</td>\n                                    <td>{new Date(transaction.dateandtime).toLocaleDateString()}</td>\n                                    <td>{getTransactionStatus(transaction.status)}</td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n            </TitleCard>\n        </>\n    );\n}\n\nexport default Billing;\n","import { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { setPageTitle } from '../../features/common/headerSlice'\nimport Billing from '../../features/settings/billing'\n\nfunction InternalPage(){\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(setPageTitle({ title : \"Bills\"}))\n      }, [])\n\n\n    return(\n        <Billing />\n    )\n}\n\nexport default InternalPage"],"names":["title","children","topMargin","TopSideButtons","className","styleClass","useState","setTotalAmountInvested","transactions","setTransactions","approvedTransactions","setApprovedTransactions","setTotalTokens","setAvailableTokens","setTotalTokensWithdrawn","error","setError","loading","setLoading","dispatch","useDispatch","fetchDataWithRetry","url","options","retries","axios","timeout","res","data","useEffect","clearNotification","fetchUserData","token","localStorage","getItem","showNotification","message","status","headers","Authorization","resUser","investedAmount","totalAmountInvested","resTransactions","sortedTransactions","sort","a","b","Date","dateandtime","approvedTrans","filter","transaction","totalTokensSum","reduce","sum","tokens","availableTokensSum","tokensAvailable","totalWithdrawnTokensSum","tokensWithdrawn","map","packageName","toFixed","min_tokens_req","_id","packagePrice","stackingPeriod","toLocaleDateString","setPageTitle"],"sourceRoot":""}