{"version":3,"file":"static/js/188.212a26a1.chunk.js","mappings":"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","sources":["components/Input/InputText.js","components/Typography/ErrorText.js","features/user/Register.js","pages/Register.js"],"sourcesContent":["import { useState } from \"react\"\n\n\nfunction InputText({labelTitle, labelStyle, type, containerStyle, defaultValue, placeholder, updateFormValue, updateType}){\n\n    const [value, setValue] = useState(defaultValue)\n\n    const updateInputValue = (val) => {\n        setValue(val)\n        updateFormValue({updateType, value : val})\n    }\n\n    return(\n        <div className={`form-control w-full ${containerStyle}`}>\n            <label className=\"label\">\n                <span className={\"label-text text-base-content \" + labelStyle}>{labelTitle}</span>\n            </label>\n            <input type={type || \"text\"} value={value} placeholder={placeholder || \"\"} onChange={(e) => updateInputValue(e.target.value)}className=\"input  input-bordered w-full \" />\n        </div>\n    )\n}\n\n\nexport default InputText","function ErrorText({styleClass, children}){\n    return(\n        <p className={`text-center  text-error ${styleClass}`}>{children}</p>\n    )\n}\n\nexport default ErrorText","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport ErrorText from '../../components/Typography/ErrorText';\nimport InputText from '../../components/Input/InputText';\nimport axios from 'axios';\nimport { showNotification } from '../common/headerSlice';\n\nfunction Register() {\n  const INITIAL_REGISTER_OBJ = {\n    name: \"\",\n    emailId: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    phoneNumber: \"\",\n    sponsorUsername: \"\",\n    countryCode: \"+91\",\n  };\n\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const [registerObj, setRegisterObj] = useState(INITIAL_REGISTER_OBJ);\n  const [message, setMessage] = useState(\"\");\n  const [showNonIndiaMessage, setShowNonIndiaMessage] = useState(false);\n  const [terms, setTerms] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [acceptTerms, setAcceptTerms] = useState(false);\n  const [showPassword, setShowPassword] = useState(false); // State for password visibility\n  const dispatch = useDispatch();\n\n  // Retry logic with timeout\n  const submitWithRetry = async (request, retries = 3, timeout = 5000) => {\n    try {\n      const res = await axios.post(request.url, request.data, { timeout });\n      return res.data;\n    } catch (err) {\n      if (retries > 0) {\n        return submitWithRetry(request, retries - 1, timeout);\n      } else {\n        throw err;\n      }\n    }\n  };\n\n  useEffect(() => {\n    const fetchTerms = async () => {\n      try {\n        const res = await axios.get('http://localhost:5000/api/users/terms');\n        setTerms(res.data);\n      } catch (error) {\n        console.error('Failed to fetch terms', error);\n      }\n    };\n\n    fetchTerms();\n  }, []);\n\n  const submitForm = async (e) => {\n    e.preventDefault();\n    if (!acceptTerms) {\n      setErrorMessage(\"You must accept the terms and conditions!\");\n      return;\n    }\n    setErrorMessage(\"\");\n    setMessage(\"\"); // Clear previous messages\n\n    // Form validation with notification\n    if (!registerObj.name.trim()) {\n      const errorMsg = \"Name is required!\";\n      setErrorMessage(errorMsg);\n      dispatch(showNotification({ message: errorMsg, status: 0 }));\n      return;\n    }\n\n    if (!registerObj.emailId.trim()) {\n      const errorMsg = \"Email Id is required!\";\n      setErrorMessage(errorMsg);\n      dispatch(showNotification({ message: errorMsg, status: 0 }));\n      return;\n    }\n\n    if (!registerObj.password.trim()) {\n      const errorMsg = \"Password is required!\";\n      setErrorMessage(errorMsg);\n      dispatch(showNotification({ message: errorMsg, status: 0 }));\n      return;\n    }\n\n    // Password validation: more than 7 characters and alphanumeric\n    const passwordRegex = /^(?=.*[a-zA-Z])(?=.*[0-9])[a-zA-Z0-9]+$/;\n    if (registerObj.password.length <= 7 || !passwordRegex.test(registerObj.password)) {\n      const errorMsg = \"Password must be more than 7 characters and alphanumeric!\";\n      setErrorMessage(errorMsg);\n      dispatch(showNotification({ message: errorMsg, status: 0 }));\n      return;\n    }\n\n    if (!registerObj.confirmPassword.trim()) {\n      const errorMsg = \"Please confirm your password!\";\n      setErrorMessage(errorMsg);\n      dispatch(showNotification({ message: errorMsg, status: 0 }));\n      return;\n    }\n\n    if (registerObj.password !== registerObj.confirmPassword) {\n      const errorMsg = \"Passwords do not match!\";\n      setErrorMessage(errorMsg);\n      dispatch(showNotification({ message: errorMsg, status: 0 }));\n      return;\n    }\n\n    if (!registerObj.phoneNumber.trim()) {\n      const errorMsg = \"Phone number is required!\";\n      setErrorMessage(errorMsg);\n      dispatch(showNotification({ message: errorMsg, status: 0 }));\n      return;\n    }\n\n    // Validate phone number length and digits\n    if (registerObj.phoneNumber.length !== 10 || isNaN(registerObj.phoneNumber)) {\n      const errorMsg = \"Phone number must be 10 digits!\";\n      setErrorMessage(errorMsg);\n      dispatch(showNotification({ message: errorMsg, status: 0 }));\n      return;\n    }\n\n    setLoading(true);\n\n    try {\n      const data = await submitWithRetry({\n        url: 'http://localhost:5000/api/users/register',\n        data: {\n          username: registerObj.name,\n          email: registerObj.emailId,\n          password: registerObj.password,\n          phoneNumber: `${registerObj.countryCode}-${registerObj.phoneNumber}`,\n          sponsorUsername: registerObj.sponsorUsername,\n        },\n      });\n\n      setMessage(data.message || 'Registration successful!');\n      dispatch(showNotification({ message: 'Registration successful!', status: 1 }));\n\n      localStorage.setItem(\"token\", data.token); // Store token if applicable\n      window.location.href = '/app/dashboard'; // Redirect to dashboard\n    } catch (err) {\n      const errorMsg = err.response?.data?.message || 'Registration failed. Please try again.';\n      setErrorMessage(errorMsg);\n      dispatch(showNotification({ message: errorMsg, status: 0 }));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateFormValue = ({ updateType, value }) => {\n    setErrorMessage(\"\");\n    setMessage(\"\"); // Clear previous messages on form input change\n    setRegisterObj({ ...registerObj, [updateType]: value });\n\n    // Show non-India message based on country code selection\n    if (updateType === \"countryCode\" && value !== \"+91\") {\n      setShowNonIndiaMessage(true);\n    } else if (updateType === \"countryCode\" && value === \"+91\") {\n      setShowNonIndiaMessage(false);\n    }\n  };\n\n  // Toggle password visibility\n  const togglePasswordVisibility = () => {\n    setShowPassword(!showPassword);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-base-200 flex items-center\">\n      <div className=\"card mx-auto w-full max-w-5xl shadow-xl flex justify-center items-center\">\n        <div className=\"grid md:grid-cols-1 grid-cols-1 bg-base-100 rounded-xl w-full md:w-1/2 animate-fadeIn\">\n          <div className=\"py-24 px-10\">\n            <h1 className='text-3xl text-center font-bold mb-8 '><img src=\"/logo197.png\" className=\"w-12 inline-block mr-2 mask mask-circle\" alt=\"dashwind-logo\" />Peplix</h1>\n            <h2 className=\"text-2xl font-semibold mb-2 text-center\">Register</h2>\n            <form onSubmit={submitForm}>\n              <div className=\"mb-4\">\n                <InputText\n                  defaultValue={registerObj.name}\n                  updateType=\"name\"\n                  containerStyle=\"mt-4\"\n                  labelTitle=\"Name\"\n                  updateFormValue={updateFormValue}\n                />\n                <InputText\n                  defaultValue={registerObj.emailId}\n                  updateType=\"emailId\"\n                  containerStyle=\"mt-4\"\n                  labelTitle=\"Email Id\"\n                  updateFormValue={updateFormValue}\n                />\n                <div className=\"relative\">\n                  <InputText\n                    defaultValue={registerObj.password}\n                    type={showPassword ? \"text\" : \"password\"}\n                    updateType=\"password\"\n                    containerStyle=\"mt-4\"\n                    labelTitle=\"Password\"\n                    updateFormValue={updateFormValue}\n                  />\n                  <button\n                    type=\"button\"\n                    className=\"absolute right-2 top-10 text-sm text-primary\"\n                    onClick={togglePasswordVisibility}\n                  >\n                    {showPassword ? \"Hide\" : \"Show\"}\n                  </button>\n                </div>\n                <div className=\"relative\">\n                  <InputText\n                    defaultValue={registerObj.confirmPassword}\n                    type={showPassword ? \"text\" : \"password\"}\n                    updateType=\"confirmPassword\"\n                    containerStyle=\"mt-4\"\n                    labelTitle=\"Confirm Password\"\n                    updateFormValue={updateFormValue}\n                  />\n                  <button\n                    type=\"button\"\n                    className=\"absolute right-2 top-10 text-sm text-primary\"\n                    onClick={togglePasswordVisibility}\n                  >\n                    {showPassword ? \"Hide\" : \"Show\"}\n                  </button>\n                </div>\n                <div className=\"mt-4\">\n                  <label className=\"label\">Country Code</label>\n                  <select\n                    value={registerObj.countryCode}\n                    onChange={(e) =>\n                      updateFormValue({ updateType: \"countryCode\", value: e.target.value })\n                    }\n                    className=\"select select-bordered w-full\"\n                  >\n                    <option value=\"+91\">India (+91)</option>\n                    <option value=\"+971\">UAE (+971)</option>\n                    <option value=\"+44\">UK (+44)</option>\n                    <option value=\"+1\">USA (+1)</option>\n                    <option value=\"+65\">Singapore (+65)</option>\n                    <option value=\"+49\">Germany (+49)</option>\n                  </select>\n                  {showNonIndiaMessage && (\n                    <p className=\"text-red-500 mt-2 text-center\">Your IP address does not match this country!</p>\n                  )}\n                </div>\n                <InputText\n                  defaultValue={registerObj.phoneNumber}\n                  updateType=\"phoneNumber\"\n                  containerStyle=\"mt-4\"\n                  labelTitle=\"Phone Number\"\n                  updateFormValue={updateFormValue}\n                />\n                <InputText\n                  defaultValue={registerObj.sponsorUsername}\n                  updateType=\"sponsorUsername\"\n                  containerStyle=\"mt-4\"\n                  labelTitle=\"Sponsor Username (optional)\"\n                  updateFormValue={updateFormValue}\n                />\n              </div>\n\n              <div className=\"mt-4\">\n                <label className=\"checkbox-container flex items-center\">\n                  <input\n                    type=\"checkbox\"\n                    checked={acceptTerms}\n                    onChange={(e) => setAcceptTerms(e.target.checked)}\n                    style={{ width: '20px', height: '20px' }} // Increase checkbox size\n                  />\n                  <span className=\"ml-2\">\n                    I accept the{\" \"}\n                    <button\n                      type=\"button\"\n                      className=\"text-blue-500 underline\"\n                      onClick={() => setShowModal(true)}\n                    >\n                      terms and conditions\n                    </button>\n                  </span>\n                </label>\n              </div>\n\n              <ErrorText styleClass=\"mt-8\">{errorMessage}</ErrorText>\n              <button\n                type=\"submit\"\n                className={`btn mt-2 w-full btn-primary ${loading ? \"loading\" : \"\"}`}\n              >\n                Register\n              </button>\n              <div className=\"text-center mt-4\">\n                Already have an account?{\" \"}\n                <Link to=\"/login\">\n                  <span className=\"inline-block hover:text-primary hover:underline hover:cursor-pointer transition duration-200\">\n                    Login\n                  </span>\n                </Link>\n              </div>\n            </form>\n            <p className=\"mt-4 text-center text-green-500\">{message}</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Terms and Conditions Modal */}\n      {showModal && (\n        <div className=\"fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full\">\n          <div className=\"relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md\" style={{ backgroundColor: '#0F172A' }}>\n            <h3 className=\"text-lg font-semibold text-white\">Terms and Conditions</h3>\n            <div className=\"mt-4\">\n              {terms.length > 0 ? (\n                <ul>\n                  {terms.map((term, index) => (\n                    <li key={index} className=\"mb-2 text-white\">{term.paragraph}</li>\n                  ))}\n                </ul>\n              ) : (\n                <p className=\"text-white\">Loading terms and conditions...</p>\n              )}\n            </div>\n            <div className=\"mt-4 flex justify-end space-x-2\">\n              <button\n                className=\"btn btn-secondary\"\n                onClick={() => setShowModal(false)}\n              >\n                Close\n              </button>\n              <button\n                className=\"btn btn-primary\"\n                onClick={() => {\n                  setAcceptTerms(true);\n                  setShowModal(false);\n                }}\n              >\n                I Accept\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Register;","import {useState, useRef} from 'react'\nimport {Link} from 'react-router-dom'\nimport Register from '../features/user/Register'\n\nfunction ExternalPage(){\n\n\n    return(\n        <div className=\"\">\n                <Register />\n        </div>\n    )\n}\n\nexport default ExternalPage"],"names":["labelTitle","labelStyle","type","containerStyle","defaultValue","placeholder","updateFormValue","updateType","useState","value","setValue","className","onChange","e","val","target","styleClass","children","loading","setLoading","errorMessage","setErrorMessage","name","emailId","password","confirmPassword","phoneNumber","sponsorUsername","countryCode","registerObj","setRegisterObj","message","setMessage","showNonIndiaMessage","setShowNonIndiaMessage","terms","setTerms","showModal","setShowModal","acceptTerms","setAcceptTerms","showPassword","setShowPassword","dispatch","useDispatch","submitWithRetry","request","retries","timeout","axios","url","data","res","useEffect","fetchTerms","console","error","submitForm","preventDefault","trim","errorMsg","showNotification","status","passwordRegex","length","test","isNaN","username","email","localStorage","setItem","token","window","location","href","response","togglePasswordVisibility","src","alt","onSubmit","InputText","onClick","checked","style","width","height","ErrorText","to","backgroundColor","map","term","index","paragraph"],"sourceRoot":""}