{"version":3,"file":"static/js/636.5b3f6690.chunk.js","mappings":"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","sources":["components/Cards/TitleCard.js","components/Typography/Subtitle.js","features/team/index.js","pages/protected/Leads.js"],"sourcesContent":["import Subtitle from \"../Typography/Subtitle\"\n\n  \n  function TitleCard({title, children, topMargin, TopSideButtons}){\n      return(\n          <div className={\"card w-full p-6 bg-base-100 shadow-xl \" + (topMargin || \"mt-6\")}>\n\n            {/* Title for Card */}\n              <Subtitle styleClass={TopSideButtons ? \"inline-block\" : \"\"}>\n                {title}\n\n                {/* Top side button, show only if present */}\n                {\n                    TopSideButtons && <div className=\"inline-block float-right\">{TopSideButtons}</div>\n                }\n              </Subtitle>\n              \n              <div className=\"divider mt-2\"></div>\n          \n              {/** Card Body */}\n              <div className='h-full w-full pb-6 bg-base-100'>\n                  {children}\n              </div>\n          </div>\n          \n      )\n  }\n  \n  \n  export default TitleCard"," function Subtitle({styleClass, children}){\n    return(\n        <div className={`text-xl font-semibold ${styleClass}`}>{children}</div>\n    )\n}\n\nexport default Subtitle","import { useEffect, useState } from \"react\";\nimport TitleCard from \"../../components/Cards/TitleCard\";\nimport axios from 'axios';\nimport { useDispatch } from \"react-redux\";\nimport { showNotification, clearNotification } from '../common/headerSlice';\nimport { useNavigate } from \"react-router-dom\";\n\nfunction Leads() {\n    const [wallet, setWallet] = useState(0);\n    const [teamMembers, setTeamMembers] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [withdrawWallet, setWithdrawWallet] = useState(0);\n    const [withdrawalHistory, setWithdrawalHistory] = useState([]);\n    const [withdrawAmount, setWithdrawAmount] = useState('');\n    const [upiId, setUpiId] = useState('');\n    const [confirmUpiId, setConfirmUpiId] = useState('');\n    const [redirectCountdown, setRedirectCountdown] = useState(null);\n\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    const fetchDataWithRetry = async (url, options = {}, retries = 3) => {\n        try {\n            const res = await axios(url, { ...options, timeout: 5000 });\n            return res.data;\n        } catch (error) {\n            if (retries > 0) {\n                return fetchDataWithRetry(url, options, retries - 1);\n            } else {\n                throw error;\n            }\n        }\n    };\n\n    useEffect(() => {\n        dispatch(clearNotification());\n        const fetchSponsorAndWallet = async () => {\n            const token = localStorage.getItem('token');\n            if (!token) {\n                dispatch(showNotification({ message: 'No token found. Please log in again.', status: 0 }));\n                setLoading(false);\n                return;\n            }\n\n            try {\n                const data = await fetchDataWithRetry(`${process.env.REACT_APP_API_URL}/api/users/profile`, {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setWallet(data.wallet || 0);\n               \n                setError(null);\n            } catch (err) {\n                setError('Failed to fetch sponsor and wallet data.');\n                dispatch(showNotification({ message: 'Failed to fetch sponsor and wallet data.', status: 0 }));\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        const fetchTeamMembers = async () => {\n            const token = localStorage.getItem('token');\n            if (!token) {\n                dispatch(showNotification({ message: 'No token found. Please log in again.', status: 0 }));\n                setLoading(false);\n                return;\n            }\n\n            try {\n                const data = await fetchDataWithRetry(`${process.env.REACT_APP_API_URL}/api/users/team`, {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setTeamMembers(data || []);\n            } catch (err) {\n                setError('Failed to fetch team members.');\n                dispatch(showNotification({ message: 'Failed to fetch team members.', status: 0 }));\n            }\n        };\n\n        const fetchWithdrawWallet = async () => {\n            const token = localStorage.getItem('token');\n            try {\n                const data = await fetchDataWithRetry(`${process.env.REACT_APP_API_URL}/api/users/withdraw-wallet`, {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setWithdrawWallet(data.withdrawWallet || 0);\n            } catch (err) {\n                \n            }\n        };\n\n        const fetchWithdrawalHistory = async () => {\n            const token = localStorage.getItem('token');\n            try {\n                const data = await fetchDataWithRetry(`${process.env.REACT_APP_API_URL}/api/users/withdrawal-history`, {\n                    headers: { Authorization: `Bearer ${token}` }\n                });\n                setWithdrawalHistory(data || []);\n            } catch (err) {\n                dispatch(showNotification({ message: 'Failed to fetch wallet withdrawal history.', status: 0 }));\n            }\n        };\n\n        fetchSponsorAndWallet();\n        fetchTeamMembers();\n        fetchWithdrawWallet();\n        fetchWithdrawalHistory();\n    }, [dispatch]);\n\n    useEffect(() => {\n        if (redirectCountdown !== null && redirectCountdown > 0) {\n            const timer = setTimeout(() => {\n                setRedirectCountdown(redirectCountdown - 1);\n            }, 1000);\n            return () => clearTimeout(timer);\n        } else if (redirectCountdown === 0) {\n            navigate('/app/dashboard');\n        }\n    }, [redirectCountdown, navigate]);\n\n    const handleWithdrawSubmit = async () => {\n        const token = localStorage.getItem('token');\n        if (!token) {\n            dispatch(showNotification({ message: 'No token found. Please log in again.', status: 0 }));\n            return;\n        }\n    \n        if (!withdrawAmount || !upiId || !confirmUpiId) {\n            dispatch(showNotification({ message: 'Please fill in all fields.', status: 0 }));\n            return;\n        }\n    \n        if (upiId !== confirmUpiId) {\n            dispatch(showNotification({ message: 'Wallet Address IDs do not match.', status: 0 }));\n            return;\n        }\n    \n        if (parseFloat(withdrawAmount) > wallet) {\n            dispatch(showNotification({ message: 'Insufficient amount in your wallet.', status: 0 }));\n            return;\n        }\n    \n        try {\n            const res = await fetchDataWithRetry(`${process.env.REACT_APP_API_URL}/api/users/withdraw-wallet`, {\n                method: 'POST',\n                data: { withdrawAmount, upiId },\n                headers: { Authorization: `Bearer ${token}` }\n            });\n    \n            dispatch(showNotification({\n                message: 'Withdrawal Request sent successfully. Redirecting to dashboard in 5 seconds...',\n                status: 1\n            }));\n    \n            setWithdrawAmount('');\n            setUpiId('');\n            setConfirmUpiId('');\n            setRedirectCountdown(5);\n        } catch (err) {\n            if (err.response && err.response.data && err.response.data.message === 'You must own at least one package to withdraw funds.') {\n                dispatch(showNotification({ message: 'You must own at least one package to withdraw wallet amount', status: 0 }));\n            } \n            else if(err.response && err.response.data && err.response.data.message === 'The minimum withdrawal amount is $15.'){\n                dispatch(showNotification({ message: 'Minimum wallet withdrawal amount is $15', status: 0 }));\n            }\n            else {\n                dispatch(showNotification({ message: 'Failed to submit withdrawal request.', status: 0 }));\n            }\n        }\n    };\n    \n\n    const getWithdrawStatus = (status) => {\n        if (status === \"approved\") return <div className=\"badge badge-success\">{status}</div>;\n        if (status === \"pending\") return <div className=\"badge badge-primary\">{status}</div>;\n        if (status === \"rejected\") return <div className=\"badge badge-error\">{status}</div>;\n        return <div className=\"badge badge-ghost\">{status}</div>;\n    };\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p className=\"text-red-500\">{error}</p>;\n\n    return (\n        <>\n            {/* Cards for Sponsor and Wallet Amount */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6 animate-fadeIn\">\n               \n                <TitleCard title=\"Wallet Amount\" topMargin=\"mt-2\">\n                    <p className=\"text-lg font-semibold\">${wallet}</p>\n                </TitleCard>\n            </div>\n\n            {/* My Team Card */}\n            <div className=\"mb-6 animate-fadeIn\">\n                <TitleCard title=\"My Team\" topMargin=\"mt-2\">\n                    <div className=\"overflow-x-auto w-full\">\n                        <table className=\"table w-full\">\n                            <thead>\n                                <tr>\n                                    <th>Username</th>\n                                    <th>Rank</th>\n                                    <th>Email</th>\n                                    <th>Phone Number</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {teamMembers.length > 0 ? (\n                                    teamMembers.map((member, index) => (\n                                        <tr key={index}>\n                                            <td>{member.username}</td>\n                                            <td>{member.rank}</td>\n                                            <td>{member.email}</td>\n                                            <td>{member.phoneNumber}</td>\n                                        </tr>\n                                    ))\n                                ) : (\n                                    <tr>\n                                        <td colSpan=\"4\" className=\"text-center\">No team members found</td>\n                                    </tr>\n                                )}\n                            </tbody>\n                        </table>\n                    </div>\n                </TitleCard>\n            </div>\n\n            {/* Withdraw Wallet Section */}\n            <div className=\"mb-6 animate-fadeIn\">\n                <TitleCard title=\"Withdraw Wallet Amount\" topMargin=\"mt-2\">\n                    <div>\n                        <div className=\"mb-6\">\n                            <label htmlFor=\"withdrawAmount\" className=\"block text-lg font-semibold text-gray-600 mb-2\">Withdraw Amount</label>\n                            <input\n                                type=\"number\"\n                                id=\"withdrawAmount\"\n                                value={withdrawAmount}\n                                onChange={(e) => setWithdrawAmount(e.target.value)}\n                                className=\"input input-bordered w-full p-3 border-gray-300 rounded-md\"\n                                placeholder=\"Enter amount to withdraw\"\n                            />\n                        </div>\n\n                        <div className=\"mb-6\">\n                            <label htmlFor=\"upiId\" className=\"block text-lg font-semibold text-gray-600 mb-2\">Wallet Address ID</label>\n                            <input\n                                type=\"text\"\n                                id=\"upiId\"\n                                value={upiId}\n                                onChange={(e) => setUpiId(e.target.value)}\n                                className=\"input input-bordered w-full p-3 border-gray-300 rounded-md\"\n                                placeholder=\"Enter your Wallet Address ID\"\n                            />\n                        </div>\n                        \n                        <div className=\"mb-6\">\n                            <label htmlFor=\"confirmUpiId\" className=\"block text-lg font-semibold text-gray-600 mb-2\">Confirm Wallet Address ID</label>\n                            <input\n                                type=\"text\"\n                                id=\"confirmUpiId\"\n                                value={confirmUpiId}\n                                onChange={(e) => setConfirmUpiId(e.target.value)}\n                                className=\"input input-bordered w-full p-3 border-gray-300 rounded-md\"\n                                placeholder=\"Confirm your Wallet Address ID\"\n                            />\n                        </div>\n\n                        <button onClick={handleWithdrawSubmit} className=\"btn btn-primary w-full p-3 font-bold rounded-md hover:bg-blue-700 transition duration-300 mt-1\">Submit Withdrawal Request</button>\n\n                        {/* Countdown for redirection */}\n                        {redirectCountdown !== null && (\n                            <p className=\"mt-4 text-center text-gray-600 font-semibold\">\n                                Redirecting to dashboard in {redirectCountdown} second{redirectCountdown !== 1 ? 's' : ''}.\n                            </p>\n                        )}\n                    </div>\n                </TitleCard>\n            </div>\n\n            {/* Wallet Withdrawal History */}\n            <div className=\"grid grid-cols-1 md:grid-cols-1 gap-6 mb-6 animate-fadeIn\">\n                <TitleCard title=\"Wallet Withdrawal History\" topMargin=\"mt-2\">\n                    <div className=\"overflow-x-auto w-full\">\n                        <table className=\"table w-full\">\n                            <thead>\n                                <tr>\n                                    <th>Date</th>\n                                    <th>Amount</th>\n                                    <th>Transaction </th>\n                                    <th>Wallet Address </th>\n                                    <th>Status</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {withdrawalHistory.length > 0 ? (\n                                    withdrawalHistory.map((history, index) => (\n                                        <tr key={index}>\n                                            <td>{new Date(history.requestedAt).toLocaleDateString()}</td>\n                                            <td>${history.withdrawAmount}</td>\n                                            <td>{history.utrNo || 'N/A'}</td>\n                                            <td>{history.upiId || 'N/A'}</td>\n                                            <td>{getWithdrawStatus(history.status)}</td>\n                                        </tr>\n                                    ))\n                                ) : (\n                                    <tr>\n                                        <td colSpan=\"5\" className=\"text-center\">No withdrawal history found</td>\n                                    </tr>\n                                )}\n                            </tbody>\n                        </table>\n                    </div>\n                </TitleCard>\n            </div>\n        </>\n    );\n}\n\nexport default Leads;\n","import { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { setPageTitle } from '../../features/common/headerSlice'\nimport Leads from '../../features/team'\n\nfunction InternalPage(){\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(setPageTitle({ title : \"Team\"}))\n      }, [])\n\n\n    return(\n        <Leads />\n    )\n}\n\nexport default InternalPage"],"names":["title","children","topMargin","TopSideButtons","className","styleClass","useState","wallet","setWallet","teamMembers","setTeamMembers","loading","setLoading","error","setError","setWithdrawWallet","withdrawalHistory","setWithdrawalHistory","withdrawAmount","setWithdrawAmount","upiId","setUpiId","confirmUpiId","setConfirmUpiId","redirectCountdown","setRedirectCountdown","dispatch","useDispatch","navigate","useNavigate","fetchDataWithRetry","url","options","retries","axios","timeout","res","data","useEffect","clearNotification","fetchSponsorAndWallet","token","localStorage","getItem","showNotification","message","status","process","headers","Authorization","fetchTeamMembers","fetchWithdrawWallet","withdrawWallet","fetchWithdrawalHistory","timer","setTimeout","clearTimeout","handleWithdrawSubmit","parseFloat","method","response","TitleCard","length","map","member","index","username","rank","email","phoneNumber","colSpan","htmlFor","type","id","value","onChange","e","target","placeholder","onClick","history","Date","requestedAt","toLocaleDateString","utrNo","setPageTitle"],"sourceRoot":""}