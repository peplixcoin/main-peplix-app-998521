{"version":3,"file":"static/js/542.ed7c1c25.chunk.js","mappings":"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","sources":["components/Cards/TitleCard.js","components/Typography/Subtitle.js","features/dashboard/components/DashboardStats.js","features/dashboard/components/DoughnutChart.js","features/dashboard/index.js","pages/protected/Dashboard.js"],"sourcesContent":["import Subtitle from \"../Typography/Subtitle\"\n\n  \n  function TitleCard({title, children, topMargin, TopSideButtons}){\n      return(\n          <div className={\"card w-full p-6 bg-base-100 shadow-xl \" + (topMargin || \"mt-6\")}>\n\n            {/* Title for Card */}\n              <Subtitle styleClass={TopSideButtons ? \"inline-block\" : \"\"}>\n                {title}\n\n                {/* Top side button, show only if present */}\n                {\n                    TopSideButtons && <div className=\"inline-block float-right\">{TopSideButtons}</div>\n                }\n              </Subtitle>\n              \n              <div className=\"divider mt-2\"></div>\n          \n              {/** Card Body */}\n              <div className='h-full w-full pb-6 bg-base-100'>\n                  {children}\n              </div>\n          </div>\n          \n      )\n  }\n  \n  \n  export default TitleCard"," function Subtitle({styleClass, children}){\n    return(\n        <div className={`text-xl font-semibold ${styleClass}`}>{children}</div>\n    )\n}\n\nexport default Subtitle","function DashboardStats({title, icon, value, description, colorIndex}){\n\n    const COLORS = [\"primary\", \"primary\"]\n\n    const getDescStyle = () => {\n        if(description.includes(\"↗︎\"))return \"font-bold text-green-700 dark:text-green-300\"\n        else if(description.includes(\"↙\"))return \"font-bold text-rose-500 dark:text-red-400\"\n        else return \"\"\n    }\n\n    return(\n        <div className=\"stats shadow\">\n            <div className=\"stat\">\n                <div className={`stat-figure dark:text-slate-300 text-${COLORS[colorIndex%2]}`}>{icon}</div>\n                <div className=\"stat-title dark:text-slate-300\">{title}</div>\n                <div className={`stat-value dark:text-slate-300 text-${COLORS[colorIndex%2]}`}>{value}</div>\n                <div className={\"stat-desc  \" + getDescStyle()}>{description}</div>\n            </div>\n        </div>\n    )\n}\n\nexport default DashboardStats","import {\n    Chart as ChartJS,\n    Filler,\n    ArcElement,\n    Tooltip,\n    Legend,\n} from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport TitleCard from '../../../components/Cards/TitleCard';\n\n// Registering components needed for ChartJS\nChartJS.register(ArcElement, Tooltip, Legend, Filler);\n\nfunction DoughnutChart() {\n    const options = {\n        responsive: true,\n        plugins: {\n            legend: {\n                position: 'top',\n            },\n            tooltip: {\n                callbacks: {\n                    label: function (tooltipItem) {\n\n                        // Return only the color of the segment\n                        return null;\n                    },\n                },\n            },\n        },\n    };\n\n    const labels = ['INDIA', 'UAE', 'SINGAPORE', 'UK', 'US', 'GERMANY'];\n\n    const data = {\n        labels,\n        datasets: [\n            {\n                label: 'Investment',\n                data: [30, 20, 12, 17, 15, 7],\n                backgroundColor: [\n                    'rgba(255, 99, 132, 0.8)',\n                    'rgba(54, 162, 235, 0.8)',\n                    'rgba(255, 206, 86, 0.8)',\n                    'rgba(75, 192, 192, 0.8)',\n                    'rgba(153, 102, 255, 0.8)',\n                    'rgba(255, 159, 64, 0.8)',\n                ],\n                borderColor: [\n                    'rgba(255, 99, 132, 1)',\n                    'rgba(54, 162, 235, 1)',\n                    'rgba(255, 206, 86, 1)',\n                    'rgba(75, 192, 192, 1)',\n                    'rgba(153, 102, 255, 1)',\n                    'rgba(255, 159, 64, 1)',\n                ],\n                borderWidth: 1,\n            }\n        ],\n    };\n\n    return (\n        <></>\n    );\n}\n\nexport default DoughnutChart;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport DashboardStats from './components/DashboardStats';\nimport DoughnutChart from './components/DoughnutChart';\nimport CurrencyDollarIcon from '@heroicons/react/24/outline/CurrencyDollarIcon';\nimport CreditCardIcon from '@heroicons/react/24/outline/CreditCardIcon';\nimport { useDispatch } from 'react-redux';\nimport { showNotification, clearNotification } from '../common/headerSlice';\n\nfunction Dashboard() {\n  const [statsData, setStatsData] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [totalAmountInvested, setTotalAmountInvested] = useState(0);\n  const [transactions, setTransactions] = useState([]);\n  const [approvedTransactions, setApprovedTransactions] = useState([]);\n  const [totalTokens, setTotalTokens] = useState(0);\n  const [availableTokens, setAvailableTokens] = useState(0);\n  const [totalTokensWithdrawn, setTotalTokensWithdrawn] = useState(0);\n  const dispatch = useDispatch();\n\n  const fetchDataWithRetry = async (url, options = {}, retries = 3) => {\n    try {\n      const response = await axios(url, { ...options, timeout: 5000 }); // 5 seconds timeout\n      return response.data;\n    } catch (error) {\n      if (retries > 0) {\n        return fetchDataWithRetry(url, options, retries - 1); // Retry logic\n      } else {\n        throw error; // Throw after retry limit\n      }\n    }\n  };\n\n  useEffect(() => {\n    dispatch(clearNotification());\n    const fetchStats = async () => {\n      const token = localStorage.getItem('token');\n\n      if (!token) {\n        setError('No token found, please log in again.');\n        setLoading(false);\n        return;\n      }\n\n      try {\n        const statsData = await fetchDataWithRetry('http://localhost:5000/api/users/stats', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n\n        const formattedData = [\n          { title: \"Current Token Value\", value: `$${statsData.tokenValue}`, icon: <CurrencyDollarIcon className='w-8 h-8' />, description: statsData.tokenDescription || \"↗︎ 15%\" }\n        ];\n\n        setStatsData(formattedData);\n        setError(null);\n      } catch (err) {\n        setError('Failed to fetch stats data after multiple attempts. Please try again later.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    const fetchUserData = async () => {\n      const token = localStorage.getItem('token');\n\n      if (!token) {\n        setError('No token found, please log in again.');\n        dispatch(showNotification({ message: 'No token found, please log in again.', status: 0 }));\n        setLoading(false);\n        return;\n      }\n\n      try {\n        const userData = await fetchDataWithRetry('http://localhost:5000/api/users/profile', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n\n        const investedAmount = userData.totalAmountInvested || 0;\n        setTotalAmountInvested(investedAmount);\n\n        const transactionData = await fetchDataWithRetry('http://localhost:5000/api/users/transactions', {\n          headers: { Authorization: `Bearer ${token}` }\n        });\n\n        const sortedTransactions = transactionData.sort((a, b) => new Date(b.dateandtime) - new Date(a.dateandtime));\n        setTransactions(sortedTransactions);\n\n        const approvedTrans = sortedTransactions.filter(transaction => transaction.status === 'approved');\n        setApprovedTransactions(approvedTrans);\n\n        const totalTokensSum = approvedTrans.reduce((sum, transaction) => sum + (transaction.tokens || 0), 0);\n        const availableTokensSum = approvedTrans.reduce((sum, transaction) => sum + (transaction.tokensAvailable || 0), 0);\n        const totalWithdrawnTokensSum = approvedTrans.reduce((sum, transaction) => sum + (transaction.tokensWithdrawn || 0), 0);\n\n        setTotalTokens(totalTokensSum);\n        setAvailableTokens(availableTokensSum);\n        setTotalTokensWithdrawn(totalWithdrawnTokensSum);\n\n        setError(null);\n        dispatch(showNotification({ message: 'Data loaded successfully!', status: 1 }));\n      } catch (err) {\n        setError('Failed to fetch user data after multiple attempts. Please try again later.');\n        dispatch(showNotification({ message: 'Failed to fetch data.', status: 0 }));\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchUserData();\n    fetchStats();\n  }, [dispatch]);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p className=\"text-red-500\">{error}</p>;\n\n  return (\n    <>\n    <div className='min-h-screen lg:min-h-fit'>\n      <div className=\"grid lg:grid-cols-3 mt-2 md:grid-cols-2 grid-cols-1 gap-4 animate-fadeIn\">\n        {statsData.map((d, k) => (\n          <DashboardStats key={k} {...d} colorIndex={k} />\n        ))}\n        <DashboardStats\n          title=\"Total Amount Invested\"\n          icon={<CurrencyDollarIcon className='w-8 h-8' />}\n          value={`$${totalAmountInvested}`}\n          description=\"\"\n          colorIndex={0}\n        />\n        <DashboardStats\n          title=\"Total Tokens\"\n          icon={<CreditCardIcon className='w-8 h-8' />}\n          value={totalTokens}\n          description=\"\"\n          colorIndex={1}\n        />\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4 mt-4 animate-fadeIn\">\n        <DashboardStats\n          title=\"Total Available Tokens\"\n          icon={<CreditCardIcon className='w-8 h-8' />}\n          value={availableTokens.toFixed(2)}\n          description=\"\"\n          colorIndex={0}\n        />\n        <DashboardStats\n          title=\"Total Tokens Withdrawn\"\n          icon={<CreditCardIcon className='w-8 h-8' />}\n          value={totalTokensWithdrawn.toFixed(2)}\n          description=\"\"\n          colorIndex={1}\n        />\n      </div>\n\n     </div>\n    </>\n  );\n}\n\nexport default Dashboard;\n","import { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { setPageTitle } from '../../features/common/headerSlice'\nimport Dashboard from '../../features/dashboard/index'\n\nfunction InternalPage(){\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(setPageTitle({ title : \"Dashboard\"}))\n      }, [])\n\n\n    return(\n        <Dashboard />\n    )\n}\n\nexport default InternalPage"],"names":["title","children","topMargin","TopSideButtons","className","styleClass","icon","value","description","colorIndex","COLORS","includes","ChartJS","ArcElement","Tooltip","Legend","Filler","useState","statsData","setStatsData","error","setError","loading","setLoading","totalAmountInvested","setTotalAmountInvested","setTransactions","setApprovedTransactions","totalTokens","setTotalTokens","availableTokens","setAvailableTokens","totalTokensWithdrawn","setTotalTokensWithdrawn","dispatch","useDispatch","fetchDataWithRetry","url","options","retries","axios","timeout","response","data","useEffect","clearNotification","fetchStats","token","localStorage","getItem","headers","Authorization","formattedData","tokenValue","tokenDescription","fetchUserData","showNotification","message","status","userData","investedAmount","transactionData","sortedTransactions","sort","a","b","Date","dateandtime","approvedTrans","filter","transaction","totalTokensSum","reduce","sum","tokens","availableTokensSum","tokensAvailable","totalWithdrawnTokensSum","tokensWithdrawn","map","d","k","toFixed","setPageTitle"],"sourceRoot":""}