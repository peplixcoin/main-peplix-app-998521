{"version":3,"file":"static/js/490.06d80ff8.chunk.js","mappings":"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","sources":["components/Input/InputText.js","components/Typography/ErrorText.js","features/user/Login.js","pages/Login.js"],"sourcesContent":["import { useState } from \"react\"\n\n\nfunction InputText({labelTitle, labelStyle, type, containerStyle, defaultValue, placeholder, updateFormValue, updateType}){\n\n    const [value, setValue] = useState(defaultValue)\n\n    const updateInputValue = (val) => {\n        setValue(val)\n        updateFormValue({updateType, value : val})\n    }\n\n    return(\n        <div className={`form-control w-full ${containerStyle}`}>\n            <label className=\"label\">\n                <span className={\"label-text text-base-content \" + labelStyle}>{labelTitle}</span>\n            </label>\n            <input type={type || \"text\"} value={value} placeholder={placeholder || \"\"} onChange={(e) => updateInputValue(e.target.value)}className=\"input  input-bordered w-full \" />\n        </div>\n    )\n}\n\n\nexport default InputText","function ErrorText({styleClass, children}){\n    return(\n        <p className={`text-center  text-error ${styleClass}`}>{children}</p>\n    )\n}\n\nexport default ErrorText","import React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport LandingIntro from './LandingIntro';\nimport ErrorText from '../../components/Typography/ErrorText';\nimport InputText from '../../components/Input/InputText';\nimport axios from 'axios';\nimport { showNotification } from '../common/headerSlice';\n\nfunction Login({ fetchUserProfile }) {\n  const INITIAL_LOGIN_OBJ = {\n    emailId: '',\n    password: '',\n  };\n\n  const [loading, setLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState('');\n  const [loginObj, setLoginObj] = useState(INITIAL_LOGIN_OBJ);\n  const [message, setMessage] = useState('');\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n/*https://stlk-backend.onrender.com/api/users/login */\n  const loginWithRetry = async (data, retries = 3) => {\n    try {\n      const res = await axios.post('http://localhost:5000/api/users/login', data, { timeout: 5000 });\n      return res.data;\n    } catch (error) {\n      if (retries > 0) {\n        return loginWithRetry(data, retries - 1); // Retry logic\n      } else {\n        throw error; // After retries are exhausted\n      }\n    }\n  };\n\n  const submitForm = async (e) => {\n    e.preventDefault();\n    setErrorMessage('');\n    setMessage('');\n\n    if (loginObj.emailId.trim() === '') {\n      const errorMsg = 'Email Id is required!';\n      setErrorMessage(errorMsg);\n      dispatch(showNotification({ message: errorMsg, status: 0 }));\n      return;\n    }\n\n    if (loginObj.password.trim() === '') {\n      const errorMsg = 'Password is required!';\n      setErrorMessage(errorMsg);\n      dispatch(showNotification({ message: errorMsg, status: 0 }));\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const loginData = { email: loginObj.emailId, password: loginObj.password };\n\n      const res = await loginWithRetry(loginData); // Using retry logic\n      localStorage.setItem('token', res.token);\n\n      setMessage('Login successful!');\n      dispatch(showNotification({ message: 'Login successful!', status: 1 }));\n\n      navigate('/app/dashboard');\n    } catch (error) {\n      setLoading(false);\n      const errorMsg = error.response?.data?.message || 'Failed to login after multiple attempts. Please try again later.';\n      setErrorMessage(errorMsg);\n      dispatch(showNotification({ message: errorMsg, status: 0 }));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateFormValue = ({ updateType, value }) => {\n    setErrorMessage('');\n    setMessage('');\n    setLoginObj({ ...loginObj, [updateType]: value });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-base-200 flex items-center\">\n      <div className=\"card mx-auto w-full max-w-5xl shadow-xl flex justify-center items-center\">\n        <div className=\"grid md:grid-cols-1 grid-cols-1 bg-base-100 rounded-xl w-full md:w-1/2 animate-fadeIn\">\n          <div className=\"py-24 px-10\">\n            <h1 className='text-3xl text-center font-bold mb-8 '><img src=\"/logo197.png\" className=\"w-12 inline-block mr-2 mask mask-circle\" alt=\"dashwind-logo\" />Peplix</h1>\n            <h2 className=\"text-2xl font-semibold mb-2 text-center\">Login</h2>\n            <form onSubmit={submitForm}>\n              <div className=\"mb-4\">\n                <InputText\n                  type=\"email\"\n                  defaultValue={loginObj.emailId}\n                  updateType=\"emailId\"\n                  containerStyle=\"mt-4\"\n                  labelTitle=\"Email Id\"\n                  updateFormValue={updateFormValue}\n                />\n                <InputText\n                  defaultValue={loginObj.password}\n                  type=\"password\"\n                  updateType=\"password\"\n                  containerStyle=\"mt-4\"\n                  labelTitle=\"Password\"\n                  updateFormValue={updateFormValue}\n                />\n              </div>\n\n              <div className=\"text-right text-primary\">\n                <Link to=\"/forgot-password\">\n                  <span className=\"text-sm inline-block hover:text-primary hover:underline hover:cursor-pointer transition duration-200\">\n                    Forgot Password?\n                  </span>\n                </Link>\n              </div>\n\n              {/* Show only error or success message */}\n              {errorMessage && <ErrorText styleClass=\"mt-8\">{errorMessage}</ErrorText>}\n              {message && <p className=\"mt-4 text-center text-green-500\">{message}</p>}\n\n              <button\n                type=\"submit\"\n                className={'btn mt-2 w-full btn-primary' + (loading ? ' loading' : '')}\n                disabled={loading}\n              >\n                Login\n              </button>\n\n              <div className=\"text-center mt-4\">\n                Don't have an account yet?{' '}\n                <Link to=\"/register\">\n                  <span className=\"inline-block hover:text-primary hover:underline hover:cursor-pointer transition duration-200\">\n                    Register\n                  </span>\n                </Link>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import {useState, useRef} from 'react'\nimport {Link} from 'react-router-dom'\nimport Login from '../features/user/Login'\n\nfunction ExternalPage(){\n\n\n    return(\n        <div className=\"\">\n                <Login />\n        </div>\n    )\n}\n\nexport default ExternalPage"],"names":["labelTitle","labelStyle","type","containerStyle","defaultValue","placeholder","updateFormValue","updateType","useState","value","setValue","className","onChange","e","val","target","styleClass","children","fetchUserProfile","loading","setLoading","errorMessage","setErrorMessage","emailId","password","loginObj","setLoginObj","message","setMessage","navigate","useNavigate","dispatch","useDispatch","loginWithRetry","data","retries","axios","timeout","res","submitForm","preventDefault","trim","errorMsg","showNotification","status","loginData","email","localStorage","setItem","token","response","src","alt","onSubmit","to","disabled"],"sourceRoot":""}